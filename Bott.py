import time
from imapclient import IMAPClient
import pyzmail
from bs4 import BeautifulSoup
from pybit.unified_trading import HTTP
import requests
from datetime import datetime, timedelta

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
EMAIL = 'tradebotv1@gmail.com'
EMAIL_PASSWORD = 'xotv aadd sqnx ggmp'
IMAP_SERVER = 'imap.gmail.com'

API_KEY = 'm4qlJh0Vec5PzYjHiC'
API_SECRET = 'bv4MJZaIOkV3SSBbiH7ugxqyjDww4CEUTp54'
SYMBOL = 'DOGEUSDT'
QTY = 750  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
STOP_PERCENT = 3.7
CHECK_DELAY = 20

# === Telegram ===
BOT_TOKEN = '7844283362:AAHuxfe22q3K0uvtGcrcgm6iqOEqduU9r-k'
CHAT_ID = '5369718011'  
LOG_INTERVAL_MINUTES = 2

session = HTTP(api_key=API_KEY, api_secret=API_SECRET, recv_window=10000)

def round_tick(value):
    return round(value, 6)

def send_telegram(message):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'Markdown'}
        requests.post(url, data=payload)
    except Exception as e:
        print("‚ÄºÔ∏è Telegram error:", e)

# --- –ù–æ–≤–µ: –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ ---
def check_telegram_commands():
    global QTY
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        r = requests.get(url)
        data = r.json()
        if not data['ok']:
            return
        for update in data.get('result', []):
            if 'message' in update and str(update['message']['chat']['id']) == CHAT_ID:
                text = update['message'].get('text', '')
                if text.startswith('/set_qty'):
                    try:
                        new_qty = float(text.split()[1])
                        QTY = new_qty
                        send_telegram(f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å DOGE –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {QTY}")
                    except:
                        send_telegram("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_qty 500")
    except Exception as e:
        print("‚ÄºÔ∏è Telegram command error:", e)

# --- –¢—É—Ç –π–¥–µ –≤–µ—Å—å —Ç–≤—ñ–π –∫–æ–¥ get_position_info(), get_total_balance(), status_report(), close_current_position(), open_position(), get_current_position_side(), check_mail() ---
# –≤—Å—Ç–∞–≤–ª—è—î–º–æ –≤—Å–µ –±–µ–∑ –∑–º—ñ–Ω, –∫—Ä—ñ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó QTY —É open_position()

def open_position(signal):
    global QTY
    side = 'Buy' if signal == 'BUY' else 'Sell'
    try:
        order = session.place_order(
            category='linear',
            symbol=SYMBOL,
            side=side,
            order_type='Market',
            qty=QTY,
            time_in_force='GoodTillCancel',
            reduce_only=False
        )
        order_id = order['result']['orderId']
        print(f"‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –Ω–∞ {QTY} {SYMBOL} (orderId: {order_id})")
        send_telegram(f"‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –Ω–∞ {QTY} {SYMBOL}")
        # –¥–∞–ª—ñ —Ç–≤—ñ–π –∫–æ–¥ –ø–æ avgPrice —ñ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
        avg_price = None
        for _ in range(10):
            orders = session.get_order_history(category='linear', symbol=SYMBOL)['result']['list']
            for ord in orders:
                if ord['orderId'] == order_id and ord['orderStatus'] == 'Filled':
                    avg_price = float(ord.get('avgPrice', 0))
                    break
            if avg_price and avg_price > 0:
                break
            print("‚åõ –û—á—ñ–∫—É—î–º–æ avgPrice...")
            time.sleep(1)

        if avg_price:
            sl = round_tick(avg_price * (1 - STOP_PERCENT / 100)) if side == 'Buy' else round_tick(avg_price * (1 + STOP_PERCENT / 100))
            session.set_trading_stop(
                category='linear',
                symbol=SYMBOL,
                stopLoss=sl
            )
            print(f"üìâ –°—Ç–æ–ø-–ª–æ—Å—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {sl}")
            send_telegram(f"üìâ –°—Ç–æ–ø-–ª–æ—Å—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {sl}")
        else:
            print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ avgPrice ‚Äî —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            send_telegram("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ avgPrice ‚Äî —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        print("‚ÄºÔ∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó:", e)
        send_telegram(f"‚ÄºÔ∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")

# === –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ===
print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é —Å–∏–≥–Ω–∞–ª–∏...")
send_telegram("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é —Å–∏–≥–Ω–∞–ª–∏...")

last_log_time = datetime.now() - timedelta(minutes=LOG_INTERVAL_MINUTES)

while True:
    try:
        now = datetime.now()

        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if (now - last_log_time).total_seconds() >= LOG_INTERVAL_MINUTES * 60:
            status_report()
            last_log_time = now

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram
        check_telegram_commands()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –ø–æ—à—Ç–∏
        signal = check_mail()
        if signal:
            print(f"\nüì© –°–∏–≥–Ω–∞–ª –∑ –ø–æ—à—Ç–∏: {signal}")
            send_telegram(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑ –ø–æ—à—Ç–∏: {signal}")
            current = get_current_position_side()

            if current is None:
                open_position(signal)
            elif (current == 'Buy' and signal == 'SELL') or (current == 'Sell' and signal == 'BUY'):
                close_current_position()
                time.sleep(2)
                open_position(signal)
            else:
                print("‚è∏Ô∏è –ü–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

        time.sleep(CHECK_DELAY)
    except Exception as e:
        print("‚ÄºÔ∏è –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", e)
        send_telegram(f"‚ÄºÔ∏è –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        time.sleep(10)
