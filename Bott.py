import time
from imapclient import IMAPClient
import pyzmail
from bs4 import BeautifulSoup
from pybit.unified_trading import HTTP
import requests
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
EMAIL = 'tradebotv1@gmail.com'
EMAIL_PASSWORD = 'xotv aadd sqnx ggmp'
IMAP_SERVER = 'imap.gmail.com'

API_KEY = 'm4qlJh0Vec5PzYjHiC'
API_SECRET = 'bv4MJZaIOkV3SSBbiH7ugxqyjDww4CEUTp54'
SYMBOL = 'DOGEUSDT'
QTY = 750
STOP_PERCENT = 3.7
CHECK_DELAY = 20

BOT_TOKEN = '7844283362:AAHuxfe22q3K0uvtGcrcgm6iqOEqduU9r-k'
CHAT_ID = '5369718011'
LOG_INTERVAL_MINUTES = 2

session = HTTP(api_key=API_KEY, api_secret=API_SECRET, recv_window=10000)
bot = Bot(BOT_TOKEN)

# === –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å—É–º–∏ –æ—Ä–¥–µ—Ä–∞ ===
order_qty = QTY

# === Telegram —Ñ—É–Ω–∫—Ü—ñ—ó ===
def send_telegram(message):
    try:
        bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
    except Exception as e:
        print("‚ÄºÔ∏è Telegram error:", e)

def set_order_qty(new_qty):
    global order_qty
    if new_qty <= 0:
        send_telegram("‚ùå –°—É–º–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ <= 0")
        return
    if new_qty != order_qty:  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—è —Å—É–º–∞
        order_qty = new_qty
        send_telegram(f"‚úÖ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {order_qty} {SYMBOL}")

# === –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—É–º–∏ ===
def qty_buttons():
    keyboard = [
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É", callback_data="change_qty")]
    ]
    return InlineKeyboardMarkup(keyboard)

def show_qty_buttons(update: Update, context: CallbackContext):
    update.message.reply_text(
        f"üíµ –ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {order_qty} {SYMBOL}\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É:",
        reply_markup=qty_buttons()
    )

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    if query.data == "change_qty":
        query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å DOGE:")
        context.user_data['awaiting_qty'] = True

def handle_qty_message(update: Update, context: CallbackContext):
    if context.user_data.get('awaiting_qty'):
        try:
            new_qty = float(update.message.text)
            set_order_qty(new_qty)
            update.message.reply_text(f"‚úÖ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {order_qty} {SYMBOL}", reply_markup=qty_buttons())
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        finally:
            context.user_data['awaiting_qty'] = False

# === –°—Ç–∞—Ç—É—Å ===
def status_report():
    msg = "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\n\n"
    try:
        balances = session.get_wallet_balance(accountType="UNIFIED")["result"]["list"]
        usdt_balance = round(float(balances[0]["totalEquity"]), 2) if balances else 0
        msg += f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance} USDT\n\n"
    except:
        msg += "üí∞ –ë–∞–ª–∞–Ω—Å: ?\n\n"

    try:
        positions = session.get_positions(category='linear', symbol=SYMBOL)['result']['list']
        if positions:
            pos = positions[0]
            side = pos.get('side', 'Unknown')
            size = abs(float(pos.get('size', 0)))
            entry_price = float(pos.get('entryPrice', 0))
            mark_price = float(pos.get('markPrice', 0))
            pnl_usdt = (mark_price - entry_price) * size if side == 'Buy' else (entry_price - mark_price) * size
            pnl_percent = (pnl_usdt / (entry_price * size)) * 100 if entry_price*size !=0 else 0
            stop_loss = pos.get('stopLoss', '‚Äî')
            msg += f"üìå –ü–æ–∑–∏—Ü—ñ—è: *{side}* {size} {SYMBOL}\n"
            msg += f"üéØ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry_price}\n"
            msg += f"üìà –ü–æ—Ç–æ—á–Ω–∞: {mark_price}\n"
            msg += f"üìâ –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}\n"
            msg += f"üìä PnL: {round(pnl_usdt,3)} USDT ({round(pnl_percent,2)}%)\n"
        else:
            msg += "üìå –ü–æ–∑–∏—Ü—ñ—è: –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó\n"
    except:
        msg += "üìå –ü–æ–∑–∏—Ü—ñ—è: ?\n"

    msg += f"\nüíµ –ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {order_qty} {SYMBOL}"
    send_telegram(msg)

# === –û—Å–Ω–æ–≤–Ω–∏–π Telegram –±–æ—Ç ===
def run_telegram_bot():
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("qty", show_qty_buttons))
    dp.add_handler(CallbackQueryHandler(button_callback))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_qty_message))
    updater.start_polling()
    updater.idle()

# === –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ===
if __name__ == '__main__':
    from threading import Thread
    Thread(target=run_telegram_bot).start()  # Telegram –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é —Å–∏–≥–Ω–∞–ª–∏...")
    send_telegram("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é —Å–∏–≥–Ω–∞–ª–∏...")

    last_log_time = datetime.now() - timedelta(minutes=LOG_INTERVAL_MINUTES)

    while True:
        try:
            now = datetime.now()
            # –õ–æ–≥ —Å—Ç–∞—Ç—É—Å—É
            if (now - last_log_time).total_seconds() >= LOG_INTERVAL_MINUTES * 60:
                status_report()
                last_log_time = now

            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ check_mail() —ñ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π
            # signal = check_mail()
            # if signal:
            #     ...

            time.sleep(CHECK_DELAY)
        except Exception as e:
            print("‚ÄºÔ∏è –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", e)
            send_telegram(f"‚ÄºÔ∏è –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(10)
